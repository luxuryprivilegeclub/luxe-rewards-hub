
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://qckzbhsmliszfrcssmop.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFja3piaHNtbGlzemZyY3NzbW9wIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDEwMTk0MzQsImV4cCI6MjA1NjU5NTQzNH0.7fjvspLz0oQienf3A6MMKUC5XUIVt8MZ5R0RizHdbz8";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Custom method to access tables not included in the type definition
export const customQuery = (tableName: 'bookings' | 'deals' | 'members' | 'pages' | 'settings' | 'tour_packages') => {
  return supabase.from(tableName);
};

// Helper function for cleaner error handling
export const handleSupabaseError = (error: any, operation: string) => {
  console.error(`Error in ${operation}:`, error);
  throw new Error(`${operation} failed: ${error.message}`);
};

// Specialized function for updating deals
export const updateDeal = async (dealId: number, dealData: any) => {
  try {
    console.log(`Updating deal ${dealId} with data:`, dealData);
    
    // Use customQuery instead of direct database access to avoid permission issues
    const { error } = await customQuery('deals')
      .update({
        title: dealData.title,
        location: dealData.location,
        image_url: dealData.imageUrl,
        regular_price: dealData.regularPrice,
        member_price: dealData.memberPrice,
        discount: dealData.discount,
        rating: dealData.rating,
        description: dealData.description
      })
      .eq('id', dealId);
    
    if (error) {
      console.error("Error updating deal:", error);
      throw error;
    }
    
    console.log(`Deal ${dealId} updated successfully`);
    return true;
  } catch (error) {
    console.error("Exception in updateDeal:", error);
    return false;
  }
};

// Specialized function for updating tour packages
export const updateTourPackage = async (tourId: number, tourData: any) => {
  try {
    console.log(`Updating tour package ${tourId} with data:`, tourData);
    
    const { error } = await customQuery('tour_packages')
      .update({
        title: tourData.title,
        location: tourData.location,
        image_url: tourData.imageUrl,
        regular_price: tourData.regularPrice,
        member_price: tourData.memberPrice,
        discount: tourData.discount,
        rating: tourData.rating,
        description: tourData.description
      })
      .eq('id', tourId);
    
    if (error) {
      console.error("Error updating tour package:", error);
      throw error;
    }
    
    console.log(`Tour package ${tourId} updated successfully`);
    return true;
  } catch (error) {
    console.error("Exception in updateTourPackage:", error);
    return false;
  }
};

// Specialized function for updating members
export const updateMember = async (memberId: number, memberData: any) => {
  try {
    console.log(`Updating member ${memberId} with data:`, memberData);
    
    const { error } = await customQuery('members')
      .update({
        name: memberData.name,
        email: memberData.email,
        type: memberData.type,
        points: memberData.points
      })
      .eq('id', memberId);
    
    if (error) {
      console.error("Error updating member:", error);
      throw error;
    }
    
    console.log(`Member ${memberId} updated successfully`);
    return true;
  } catch (error) {
    console.error("Exception in updateMember:", error);
    return false;
  }
};

// Specialized function for updating settings
export const updateSettings = async (settingsData: any) => {
  try {
    console.log(`Updating settings with data:`, settingsData);
    
    const { error } = await customQuery('settings')
      .update({
        site_title: settingsData.siteTitle,
        site_tagline: settingsData.siteTagline,
        currency: settingsData.currency,
        payment_methods: settingsData.paymentMethods,
        silver_price: settingsData.silverPrice,
        gold_price: settingsData.goldPrice,
        platinum_price: settingsData.platinumPrice
      })
      .eq('id', 1);
    
    if (error) {
      console.error("Error updating settings:", error);
      throw error;
    }
    
    console.log("Settings updated successfully");
    return true;
  } catch (error) {
    console.error("Exception in updateSettings:", error);
    return false;
  }
};
